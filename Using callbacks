videosDb.findVideoInfo(req.params.videoId, (videoInfos) => {
    if (videoInfos._id === undefined) {
      res.status(404).json({'error': 'not found'});
      return;
    }

    let token = req.get('Authorization');
    let userId;

    if (token === undefined) {
      res.status(400).json({'error': 'unauthorization'});
      return;
    }
    tokensDb.getToken(token, (userInfos) => {
      let videoLikeNums = 0;
      let videoDislikeNums = 0;

      if (userInfos._id === undefined) {
        res.status(401).json({'error': 'unauthorization'});
        return;
      }
      userId = userInfos.userId.toString();
      videoInfos.videoDetails.clickedLike = false;
      videoInfos.videoDetails.clickedDislike = false;

      videoInfos.videoDetails.LikeStatus.forEach((user) => {
        if (user === undefined) {
          res.status(400).json({});
        }
        if (user.userId.toString() === userId.toString() && user.liked === true) {
          videoInfos.videoDetails.clickedLike = true;
        }
        if (user.userId.toString() === userId.toString() && user.disliked === true) {
          videoInfos.videoDetails.clickedDislike = true;
        }
        if (user.liked) {
          videoLikeNums++;
        }
        if (user.disliked) {
          videoDislikeNums++;
        }
      });
      videoInfos.videoDetails.videoLikeNums = videoLikeNums;
      videoInfos.videoDetails.videoDislikeNums = videoDislikeNums;
      videoInfos.commentInfos.forEach((comment) => {
        let likeNums = 0;
        let dislikeNums = 0;

        if (comment.LikeStatus.length === 0) {
          comment.likeNums = likeNums;
          comment.dislikeNums = dislikeNums;
        }
        comment.LikeStatus.forEach((value, index) => {
          if (value.liked) {
            likeNums++;
          }
          if (value.disliked) {
            dislikeNums++;
          }
          if (index >= comment.LikeStatus.length - 1) {
            comment.likeNums = likeNums;
            comment.dislikeNums = dislikeNums;
          }
        });
        if (comment.LikeStatus.length === 0) {
          comment.likestatus = false;
          comment.dislikestatus = false;
        }
        comment.likestatus = false;
        comment.dislikestatus = false;
        comment.LikeStatus.forEach((value, index) => {
          if (value.userId === userId.toString()) {
            comment.likestatus = value.liked;
            comment.dislikestatus = value.disliked;
          }
        });
      });
      res.status(200).json({
        // videoId should be same with _id, here just for testing
        // in your PC please change here
        'videoId': videoInfos._id.toString(),
        'videoUrl': videoInfos.videoUrl,
        'videoDetails': videoInfos.videoDetails,
        'uploader': videoInfos.uploader,
        'commentInfos': videoInfos.commentInfos.reverse(),
      });
    });
  });
}

function findUserInfo(email, callback) {
  MongoClient.connect(url, (err, db) => {
    try {
      if (err) {
        throw err;
      }
      let usersDB = db.collection('users');

      usersDB.findOne({'email': email}, (err, result) => {
        if (err) {
          console.log(err);
        }
        db.close();
        if (result === null) {
          return callback([]);
        }
        let userinfo = result;

        return callback(userinfo);
      });
    } catch (e) {
      console.log(e.name + ':' + e.message);
      return callback(undefined);
    }
  });
}
